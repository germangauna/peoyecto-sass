/*variables, se ponen con el signo de pesos $, se pone : y el valor*/
/*las listas, en estas usamos una funcion que se llama nth(nombre 
del elemento y el numero de ubicacion del elemento)
que necesitamos ejemplo: backgrount-color: nth($colores, 1)*/
/*tambien lo podemos hacer con una lista de pixeles de medidas */
/*que pasa si tengo muchos colores y tengo muchas variables???
sass nbos permite obtimizar las variables, nos deja hscer archivos
parcialesque empieza siempre con un guion bajo, y pponerlos en la 
 carpeta de scss, y los tenemos que importar para que esten conectados */
/*las listas, en estas usamos una funcion que se llama nth(nombre 
del elemento y el numero de ubicacion del elemento)
que necesitamos ejemplo: backgrount-color: nth($colores, 1)*/
/*tambien lo podemos hacer con una lista de pixeles de medidas */
.header-uno {
  background-color: blue;
  color: white;
}
.header-uno nav {
  border: 2px solid red;
}
.header-uno nav ul {
  list-style: none;
}
.header-uno nav ul li a {
  text-decoration: none;
  /* & */
}
.header-uno nav ul li a:hover {
  text-decoration: underline;
}
@media screen and (max-width: 490px) {
  .header-uno {
    background-color: red;
  }
}

/*que pasa si yo quiero hacer una seudo clases??, existe el & amper donde yo 
lo pomgo en la etiqueta    ue nosotros queremos que sucesa o acciones el hover por ejemploe*/
/*tambien se puede agregar una media query, y esta va a quedar agregadda ordenadamente en
la etiqueta que nosotros la alla mos puesto, este casio lo pongo en el header directamente y no
tengo que aclar que va en el header, poner la media query y la accion que queremos que suceda */
.header-home {
  background-color: blue;
  color: white;
}
.header-home nav {
  border: 2px solid red;
}
.header-home nav ul {
  list-style: none;
}
.header-home nav ul li a {
  text-decoration: none;
  /* & */
}
.header-home nav ul li a:hover {
  text-decoration: underline;
}
@media screen and (max-width: 490px) {
  .header-home {
    background-color: green;
  }
}

/*lo  bueno de las variables es que si quiero cambiar algun valor,
lo hago directamente desde la variable, y no tengo que cambiarlo 
desde cada uno de estilos*/
/*creamos el marshal mapas*/
/*1-tienen una key y tambien un valor*/
/*2- es como la lista o grupo de propiedades, que no
necesariamente tiene que ser de la misma familia, por ejemplo: la 
lista de colores que hicimos anterior*/
/*las listas, en estas usamos una funcion que se llama nth(nombre 
del elemento y el numero de ubicacion del elemento)
que necesitamos ejemplo: backgrount-color: nth($colores, 1)*/
/*tambien lo podemos hacer con una lista de pixeles de medidas */
/*entonces podes poner un grupo de propiedades, 
este grupo lo llamo cuando lo necesito, o la propiedad
de ese grupo que necesito*/
/*entonces aca cree dos grupos de propiedades donde vamos a llamar a alguna de 
estas propiedades*/
/*aca pongo el mapa que necesito que seria $standard y la key seria bg-standard
naturalmente se usan para tener paquetes, donde fijamos propiedades que pueden 
llegar a tener un rango para uno, o un estilo en particular */
/*podemos crear otro marshal donde sean 2 tipos de colores, y con estos
poder darle tonalidades, al primario por ejemplo, le ponemos la propiedad 
darken, el valor, y el porcentajr que queremos que se ocuresca en este caso,
y asi crear gamas de colorespara que nuestro sitio quede con colores complementarios
*/
.border-menu {
  border: 1px solid #4d0000;
}

/*entonces aca lo que estamos haciendo es que tenemos como fondo el color secundario,
y cuando psemos el mouse queremos que se ponga del color mas claro*/
.bg-fotos {
  background-color: #090;
}
.bg-fotos:hover {
  background-color: #66ff66;
}

/* tambien podemos hacer el mix entre varios colores */
.section-loca {
  background-color: #4d4d00;
}

.saturation {
  color: #990000;
}

.opacidad {
  color: rgba(153, 0, 0, 0.8);
}

/*enn la documentacion de sasss hay mucha documentacion 
y si se lee como estas convim+naciones de herramientas 
esta buebno qie las practiquen*/
/*los extends son bolsitas de propiedades que podemos reutilizar en
muchos lugares*/
/* se escribem con un signo % play holder el nombre las llaves y las 
propiedades que yose que se van a repetir en todos los botones*/
/*% + nombre {las propiedades}*/
.desabled, .acepted, .boton-error {
  border: 1px solid transparent;
  border-bottom: 6px;
  padding: 10px;
}

.desabled, .acepted, .boton-error {
  display: flex;
  justify-content: center;
}

.boton-error {
  background-color: red;
}

/*aca pusimos los estilos de nuestro boron de error, pewro le pusimos las
propiedades que tiene el extend, sin necesidad de volver a escribirlas, simple=
mente poner @extend con el nombre del extend*/
/*tambien podemos tener un boton de aceptar en diferente color pero con las
 miams caracteristicas, ahi le vamos a poner abajo del background-color el
  @extend %botones;*/
.acepted {
  background-color: green;
}

.desabled {
  background-color: gray;
}

/*si hago algun cambio en algunas de nuestras extenciones automaticamente
 se cambian en todas las clases de nuestros estilos*/
/*son muy parecidos a los extends, con la regla mixins, ponemos el nombre, llaves, 
las propiedades, y despues en las clases solos ponemos @include y el nombre del mixin, 
automaticamente se copian todas las propiedades, y si tengo otra clase con los mismos
estilos de estas propiedfades, tengo que haxaer exactamente los mismos, y automaticamente
 adquiere las mismas propirdades, solo escribo un alinea y en el codigo de css se transcriben 3 */
.mirando {
  border: 1px solid transparent;
  border-bottom: 6px;
  padding: 10px;
}

.miranda {
  border: 1px solid transparent;
  border-bottom: 6px;
  padding: 10px;
}

/*la diferencia primero es que no los agrupo, en realidad los mixin, son diferentes
se van a utilizar de manera diferente*/
/*mixin incluyen un $parametro ($variable) vacio al cual 
le voy a dar un valor en un futuro cercano, o sea, cuando lo utilice */
.animaciones {
  transform: 50%;
}

/*constructores -armamos una estructura que vamos a reutilizar 
 en varios elementos, pero sin saber necesariamente el valor de 
 de cada propiedad*/
.animacion-one {
  width: 100%;
}

.animacion-two {
  width: 50%;
}

/*cuando teniamos los prefijos para haxcer las animaciones y no
 escribir mucho codigo, usamos los mixins*/
/*ahora cuando tenemos las clases inmcluimos solamente los prefijos 
con el valor y no tenemos que escribir nada mas  */
.transform.one {
  -o-transform: translate(50%);
  -moz-transform: translate(50%);
  transform: translate(50%);
}

.transform.two {
  -o-transform: scale(4);
  -moz-transform: scale(4);
  transform: scale(4);
}

.transform.three {
  -o-transform: rotate(90del);
  -moz-transform: rotate(90del);
  transform: rotate(90del);
}

/*tambien se pueden usar vasrios parametros vacios a la vez,
 una vez que los llamemos a estos parametros con el include
 nos va aparecer 3 comas donde tendremos que poner los tres valores */
.miedo {
  width: 50%;
  display: grid;
  justify-content: flex-end;
  align-items: center;
  /* si le agregamos uno extra simprew va a ser center*/
}

.agustina {
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  /* si le agregamos uno extra simprew va a ser center*/
}

/*que pasa si tengo muchos colores y tengo muchas variables???
sass nbos permite obtimizar las variables, nos deja hscer archivos
parcialesque empieza siempre con un guion bajo, y pponerlos en la 
 carpeta de scss, y los tenemos que importar para que esten conectados */
/* nota: las variables simpre van arriba, porque es lo primero que se lee*/
/*tambien para que este mas ordenado el codigo, se pueden hacer 2 carpetas,
una que se llamme component y la otra base, en la de de base siempre se ponen
las que competen a varias partes de un proyecto  y los componentes se ponen las 
secciones de la pagina, esto nos obliga a cambiar las rutas de nuestros archivos
vinculados*/

/*# sourceMappingURL=style.css.map */
